---
title: "Exploratory Data Analysis"
editor: visual
---
```{r}
library(rugarch)
library(tseries)
library(FinTS)
library(ggplot2)
library(xts)
library(fBasics)
date<-da[,1]
date<-as.Date(date)
da1<-da[,2]
rets<-as.xts(da1,date)
da2<-diff(log(rets))
dlnbrent<-na.omit(da2)
dlnwti<-na.omit(da2)
dlnnymex<-na.omit(da2)
library(tidyverse)      # data manipulation and visualization
library(lubridate)      # easily work with dates and times
library(fpp2)           # working with time series data
library(zoo)            # working with time series data

```

```{r}
# Download data from Yahoo Finance
brent <- tq_get("BZ=F", 
                from = "2018-01-02", 
                to = "2023-02-15",
                get = "stock.prices")

# Convert data to a time series object
brent_ts <- ts(brent$close, start = c(2018, 1), end = c(2023, 2), frequency = 365)
brent_ts <- na_ma(brent_ts, k = 4, weighting = "exponential")
# Plot decomposed time series
de <-autoplot(decompose(brent_ts), facets = TRUE) +
  labs(title = "Decomposition of Brent Crude Oil Futures Time Series")

ggsave("brent_decomp.png", plot = de, width = 10, height = 6, dpi = 300)
```

```{r}
# Create lag plot of Brent crude oil futures data
lag1 <- ggplot(data = data.frame(y = brent_ts[-1], lag = brent_ts[-length(brent_ts)]),
       aes(x = lag, y = y)) +
  geom_point() +
  labs(title = "Lag Plot of Brent Crude Oil Futures Data")

ggsave("lag1.png", plot = lag1, width = 10, height = 6, dpi = 300)
```

```{r}
# Create grid of lag plots for Brent crude oil futures data
lags <- gglagplot(brent_ts, do.lines=FALSE)+ggtitle("Lag Plots of Brent Crude Oil Futures Data")

ggsave("lags.png", plot = lags, width = 10, height = 6, dpi = 300)
```

```{r}
# Create ACF and PACF plots for Brent crude oil futures data
acf <- ggAcf(brent_ts,main = "ACF Plot of Brent Crude Oil Futures")
```

```{r}
pacf <- ggPacf(brent_ts, 48,main = "PACF Plot of Brent Crude Oil Futures")
ggsave("brent_acf.png", plot = acf, width = 10, height = 6, dpi = 300)
ggsave("brent_pacf.png", plot = pacf, width = 10, height = 6, dpi = 300)
```

```{r}
library(aTSA)
adf.test(brent_ts)
```

```{r}
ma(elecsales, 1)

autoplot(elecsales, series="lnbrent") +
  autolayer(ma(elecsales,1), series="1-MA") +
  xlab("Year") + ylab("lnbrent") +
  ggtitle("lnbrent") +
  scale_colour_manual(values=c("Data"="grey50","1-MA"="red"),
                      breaks=c("Data","1-MA"))

ma(elecsales, 3)

autoplot(elecsales, series="lnbrent") +
  autolayer(ma(elecsales,3), series="3-MA") +
  xlab("Year") + ylab("lnbrent") +
  ggtitle("lnbrent") +
  scale_colour_manual(values=c("Data"="grey50","3-MA"="red"),
                      breaks=c("Data","3-MA"))

ma(elecsales, 5)

autoplot(elecsales, series="lnbrent") +
  autolayer(ma(elecsales,5), series="5-MA") +
  xlab("Year") + ylab("lnbrent") +
  ggtitle("lnbrent") +
  scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
                      breaks=c("Data","5-MA"))

ma(elecsales, 15)

autoplot(elecsales, series="lnbrent") +
  autolayer(ma(elecsales,15), series="15-MA") +
  xlab("Year") + ylab("lnbrent") +
  ggtitle("lnbrent") +
  scale_colour_manual(values=c("Data"="grey50","15-MA"="red"),
                      breaks=c("Data","15-MA"))
```


```{r}
ma(elecsales, 1)

autoplot(elecsales, series="lnwti") +
  autolayer(ma(elecsales,1), series="1-MA") +
  xlab("Year") + ylab("lnwti") +
  ggtitle("lnwti") +
  scale_colour_manual(values=c("Data"="grey50","1-MA"="red"),
                      breaks=c("Data","1-MA"))

ma(elecsales, 3)

autoplot(elecsales, series="lnwti") +
  autolayer(ma(elecsales,3), series="3-MA") +
  xlab("Year") + ylab("lnwti") +
  ggtitle("lnwti") +
  scale_colour_manual(values=c("Data"="grey50","3-MA"="red"),
                      breaks=c("Data","3-MA"))

ma(elecsales, 5)

autoplot(elecsales, series="lnwti") +
  autolayer(ma(elecsales,5), series="5-MA") +
  xlab("Year") + ylab("lnwti") +
  ggtitle("lnwti") +
  scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
                      breaks=c("Data","5-MA"))

ma(elecsales, 15)

autoplot(elecsales, series="lnwti") +
  autolayer(ma(elecsales,15), series="15-MA") +
  xlab("Year") + ylab("lnwti") +
  ggtitle("lnwti") +
  scale_colour_manual(values=c("Data"="grey50","15-MA"="red"),
                      breaks=c("Data","15-MA"))
```


```{r}
ma(elecsales, 1)

autoplot(elecsales, series="lnnymex") +
  autolayer(ma(elecsales,1), series="1-MA") +
  xlab("Year") + ylab("lnnymex") +
  ggtitle("lnnymex") +
  scale_colour_manual(values=c("Data"="grey50","1-MA"="red"),
                      breaks=c("Data","1-MA"))

ma(elecsales, 3)

autoplot(elecsales, series="lnnymex") +
  autolayer(ma(elecsales,3), series="3-MA") +
  xlab("Year") + ylab("lnnymex") +
  ggtitle("lnnymex") +
  scale_colour_manual(values=c("Data"="grey50","3-MA"="red"),
                      breaks=c("Data","3-MA"))

ma(elecsales, 5)

autoplot(elecsales, series="lnnymex") +
  autolayer(ma(elecsales,5), series="5-MA") +
  xlab("Year") + ylab("lnnymex") +
  ggtitle("lnnymex") +
  scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
                      breaks=c("Data","5-MA"))

ma(elecsales, 15)

autoplot(elecsales, series="lnnymex") +
  autolayer(ma(elecsales,15), series="15-MA") +
  xlab("Year") + ylab("lnnymex") +
  ggtitle("lnnymex") +
  scale_colour_manual(values=c("Data"="grey50","15-MA"="red"),
                      breaks=c("Data","15-MA"))
```


```{r}
# Descriptive statistical analysis
basicStats(dlnbrent)

# Time Series Plot
plot(dlnbrent,xlab='Date(2018-2023)',ylab='dlnbrent',main='dlnbrent time series')

#ACF
acf(dlnbrent,lag.max = 20)

#PACF
pacf(dlnbrent,lag.max=20)

#ADF test
adf.test(dlnbrent)
```

```{r}
# Descriptive statistical analysis
basicStats(dlnwti)

# Time Series Plot
plot(dlnwti,xlab='Date(2018-2023)',ylab='dlnwti',main='dlnwti time series')

#ACF
acf(dlnwti,lag.max = 20)

#PACF
pacf(dlnwti,lag.max=20)

#ADF test
adf.test(dlnwti)
```

```{r}
# Descriptive statistical analysis
basicStats(dlnnymex)

# Time Series Plot
plot(dlnnymex,xlab='Date(2018-2023)',ylab='dlnnymex',main='dlnnymex time series')

#ACF
acf(dlnnymex,lag.max = 20)

#PACF
pacf(dlnnymex,lag.max=20)

#ADF test
adf.test(dlnnymex)
```

